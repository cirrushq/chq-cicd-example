AWSTemplateFormatVersion: 2010-09-09
Description: Subnet template 2019-01-14
Parameters:
  VPC:
    Description: Name of an existing VPC
    Type: 'AWS::EC2::VPC::Id'
    ConstraintDescription: must be the name of an existing vpc
  Environment:
    Description: Environment - dev/uat/prod/preprod etc
    Type: String
  ApplicationName:
    Description: ApplicationName
    Type: String
  CIDRBase:
    Default: 10.100.0.0/16
    Description: CIDR
    Type: String
  PublicRouteTable:
    Description: Name of an existing Public Route Table
    Type: String
    ConstraintDescription: must be the name of an existing route table
  PrivateRouteTable:
    Description: Name of an existing Private Route Table
    Type: String
    ConstraintDescription: must be the name of an existing route table
  NetworkAcl:
    Description: Name of an existing network acl
    Type: String
    ConstraintDescription: must be the name of an existing route table
Mappings:
  RegionAZs:
    eu-west-1:
      '3': true
    eu-west-2:
      '3': true
Conditions:
  CreateSubnet3: !Equals 
    - !FindInMap 
      - RegionAZs
      - !Ref 'AWS::Region'
      - '3'
    - true
Resources:
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NATEIP
          - AllocationId
      SubnetId:
        Ref: AppSubnetA
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref ApplicationName
              - !Ref Environment
  NATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  AppSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select 
        - 0
        - 'Fn::Cidr':
            - !Ref CIDRBase
            - 16
            - 6
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - App
              - !Ref ApplicationName
              - !Ref Environment
              - !Select 
                - 0
                - !GetAZs 
                  Ref: 'AWS::Region'
  AppSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AppSubnetA
      RouteTableId: !Ref PublicRouteTable
  AppSubnetANetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref AppSubnetA
      NetworkAclId: !Ref NetworkAcl
  AppSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select 
        - 1
        - 'Fn::Cidr':
            - !Ref CIDRBase
            - 16
            - 6
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - App
              - !Ref ApplicationName
              - !Ref Environment
              - !Select 
                - 1
                - !GetAZs 
                  Ref: 'AWS::Region'
  AppSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AppSubnetB
      RouteTableId: !Ref PublicRouteTable
  AppSubnetBNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref AppSubnetB
      NetworkAclId: !Ref NetworkAcl
  AppSubnetC:
    Type: 'AWS::EC2::Subnet'
    Condition: CreateSubnet3
    Properties:
      AvailabilityZone: !Select 
        - 2
        - !GetAZs 
          Ref: 'AWS::Region'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Select 
        - 2
        - 'Fn::Cidr':
            - !Ref CIDRBase
            - 16
            - 6
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - App
              - !Ref ApplicationName
              - !Ref Environment
              - !Select 
                - 2
                - !GetAZs 
                  Ref: 'AWS::Region'
  AppSubnetCRouteTableAssociation:
    Condition: CreateSubnet3
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref AppSubnetC
      RouteTableId: !Ref PublicRouteTable
  AppSubnetCNetworkAclAssociation:
    Condition: CreateSubnet3
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref AppSubnetC
      NetworkAclId: !Ref NetworkAcl
Outputs:
  AppSubnetA:
    Description: App Subnet ID
    Value: !Ref AppSubnetA
  AppSubnetB:
    Description: App Subnet ID
    Value: !Ref AppSubnetB
  AppSubnetC:
    Description: App Subnet ID
    Value: !If 
      - CreateSubnet3
      - !Ref AppSubnetC
      - !Ref 'AWS::NoValue'
